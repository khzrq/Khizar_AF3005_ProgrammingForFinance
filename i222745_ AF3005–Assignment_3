{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bfb09476",
   "metadata": {},
   "source": [
    "\n",
    "# ðŸ’¸ Financial ML Streamlit App\n",
    "\n",
    "**Author:** Khizr K  \n",
    "**Objective:** Build an interactive machine learning app for financial data using Kragle datasets and Yahoo Finance, with visualizations and predictive modeling via Streamlit.\n",
    "\n",
    "---\n",
    "\n",
    "## ðŸš€ How to Run\n",
    "\n",
    "1. Make sure you have all dependencies installed:\n",
    "```\n",
    "pip install -r requirements.txt\n",
    "```\n",
    "2. Launch the app with:\n",
    "```\n",
    "streamlit run app.py\n",
    "```\n",
    "\n",
    "3. Interact via the buttons to go through each ML pipeline step.\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05ff34f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import yfinance as yf\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import plotly.express as px\n",
    "import matplotlib.pyplot as plt\n",
    "import quantstats as qs\n",
    "import os\n",
    "import io\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43374cca",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "st.set_page_config(page_title=\"Finance ML App\", layout=\"wide\")\n",
    "st.title(\"ðŸ’¹ Financial ML Dashboard\")\n",
    "st.sidebar.image(\"https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif\", use_column_width=True)\n",
    "st.sidebar.markdown(\"## Upload Kragle Dataset\")\n",
    "kragle_file = st.sidebar.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n",
    "\n",
    "st.sidebar.markdown(\"## Or Fetch from Yahoo Finance\")\n",
    "ticker_input = st.sidebar.text_input(\"Enter a Stock Ticker (e.g., AAPL, TSLA)\", \"AAPL\")\n",
    "fetch_data = st.sidebar.button(\"Fetch Data\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85f53b4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df = None\n",
    "if kragle_file is not None:\n",
    "    df = pd.read_csv(kragle_file)\n",
    "    st.success(\"Kragle dataset loaded successfully!\")\n",
    "    st.dataframe(df.head())\n",
    "\n",
    "elif fetch_data:\n",
    "    try:\n",
    "        data = yf.download(ticker_input, start=\"2010-01-01\", end=\"2024-12-31\")\n",
    "        df = data[['Open', 'High', 'Low', 'Close', 'Volume']]\n",
    "        st.success(f\"{ticker_input} data fetched successfully!\")\n",
    "        st.dataframe(df.head())\n",
    "    except:\n",
    "        st.error(\"Failed to fetch Yahoo Finance data.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14489190",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "if df is not None:\n",
    "    st.markdown(\"## ðŸ§¹ Data Preprocessing\")\n",
    "    if st.button(\"Run Preprocessing\"):\n",
    "        df.dropna(inplace=True)\n",
    "        st.success(\"Missing values removed!\")\n",
    "        st.write(\"Remaining data:\")\n",
    "        st.dataframe(df.describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cda54c6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "if df is not None and st.button(\"Train ML Model\"):\n",
    "    st.markdown(\"## ðŸ§  ML Model: Linear Regression\")\n",
    "\n",
    "    df['Target'] = df['Close'].shift(-1)\n",
    "    df.dropna(inplace=True)\n",
    "\n",
    "    X = df[['Open', 'High', 'Low', 'Volume']]\n",
    "    y = df['Target']\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    model = LinearRegression()\n",
    "    model.fit(X_train, y_train)\n",
    "    predictions = model.predict(X_test)\n",
    "\n",
    "    st.success(\"Model trained!\")\n",
    "    st.write(f\"RÂ² Score: {model.score(X_test, y_test):.2f}\")\n",
    "\n",
    "    fig = px.scatter(x=y_test, y=predictions, labels={'x': 'Actual', 'y': 'Predicted'}, title=\"Actual vs Predicted\")\n",
    "    st.plotly_chart(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adecece7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "if df is not None and st.button(\"ðŸ“„ Generate PDF Report\"):\n",
    "    returns = df['Close'].pct_change().dropna()\n",
    "    qs.reports.html(returns, output='analysis_report.html', title='Financial Report', benchmark='SPY')\n",
    "    st.success(\"QuantStats HTML report generated!\")\n",
    "\n",
    "    with open(\"analysis_report.html\", \"rb\") as file:\n",
    "        st.download_button(\"Download Report\", file, \"analysis_report.html\")\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
